name: Build
on: [push, pull_request]
jobs:
    build-firmware:
      runs-on: ubuntu-latest
      env: 
        BUILD_TYPE: "Release"
        PICOSDK_VER: "1.5.1"
        PICOEXTRA_VER: "sdk-1.5.1"
        # The Pico-SDK will listen to these environment vars
        PICO_SDK_PATH: ${{github.workspace}}/pico/pico-sdk
        PICO_EXTRAS_PATH: ${{github.workspace}}/pico/pico-extras
        OUTPUT_DIR: ${{github.workspace}}/binaries
      steps:
      - name: Checkout repo with submodules
        uses: actions/checkout@v4
        with:
            submodules: recursive

      - name: Install Arm GNU Toolchain (arm-none-eabi-gcc)
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: '12.3.Rel1'

      # Since we reference stable versions of Pico-SDK and pico-extras, we can cache their (HUGE!) downloads.
      # If this were to reference changing branches (like "master"), this caching step must be removed!!!
      - name: Cache Pico-SDK and Extras 
        id: cache-sdk
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/pico/
          key: ${{ env.PICOSDK_VER }}-${{ env.PICOEXTRA_VER }}          

      # If we did not find stuff in the cache, download it fresh.
      - name: Clone Pico-SDK
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: git clone -b "$PICOSDK_VER" --recursive https://github.com/raspberrypi/pico-sdk.git $PICO_SDK_PATH
      - name: Clone Pico-Extras
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: git clone -b "$PICOEXTRA_VER" --recursive https://github.com/raspberrypi/pico-extras.git $PICO_EXTRAS_PATH

      - name: Create Build Environment
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Patch Pico SDK to allow LTO
        run: sed -i 's/WRAPPER_FUNC(x) __wrap_/WRAPPER_FUNC(x) __attribute__((used)) __wrap_/' ${{env.PICO_SDK_PATH}}/src/rp2_common/pico_platform/include/pico/platform.h

      - name: Build GUS Firmware
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: |
          mkdir -p $OUTPUT_DIR
          cmake $GITHUB_WORKSPACE/sw -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPROJECT_TYPE="GUS" -DUSE_LTO=
          cmake --build . --config $BUILD_TYPE --parallel $(nproc)
          cp picogus.uf2 $OUTPUT_DIR/pg-gus.uf2

      - name: Build OPL / AdLib Firmware
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: |
          cmake $GITHUB_WORKSPACE/sw -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPROJECT_TYPE="OPL" -DUSE_LTO=
          cmake --build . --config $BUILD_TYPE --parallel $(nproc)
          cp picogus.uf2 $OUTPUT_DIR/pg-adlib.uf2

      - name: Build MPU401 Firmware
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: |
          cmake $GITHUB_WORKSPACE/sw -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPROJECT_TYPE="MPU" -DUSE_LTO=
          cmake --build . --config $BUILD_TYPE --parallel $(nproc)
          cp picogus.uf2 $OUTPUT_DIR/pg-mpu.uf2

      - name: Build Tandy Firmware
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: |
          cmake $GITHUB_WORKSPACE/sw -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPROJECT_TYPE="TANDY" -DUSE_LTO=
          cmake --build . --config $BUILD_TYPE --parallel $(nproc)
          cp picogus.uf2 $OUTPUT_DIR/pg-tandy.uf2

      - name: Build CMS Firmware
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: |
          cmake $GITHUB_WORKSPACE/sw -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPROJECT_TYPE="CMS" -DUSE_LTO=
          cmake --build . --config $BUILD_TYPE --parallel $(nproc)
          cp picogus.uf2 $OUTPUT_DIR/pg-cms.uf2

      - name: Build Joy Firmware
        working-directory: ${{github.workspace}}/build
        shell: bash
        run: |
          cmake $GITHUB_WORKSPACE/sw -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPROJECT_TYPE="JOY" -DUSE_LTO=
          cmake --build . --config $BUILD_TYPE --parallel $(nproc)
          cp picogus.uf2 $OUTPUT_DIR/pg-joy.uf2

      # will generate PicoGUS Firmwares.zip as downloadable artifact with all .uf2 files
      - name: Upload All Firmwares
        uses: actions/upload-artifact@v3
        with:
          name: PicoGUS Firmwares
          path: ${{env.OUTPUT_DIR}}

    build-pgusinit:
      runs-on: ubuntu-latest
      env: 
        BUILD_TYPE: "Release"
        OUTPUT_DIR: ${{github.workspace}}/binaries
      steps:
      - name: Checkout repo with submodules
        uses: actions/checkout@v4
        with:
            submodules: recursive

      - name: Install OpenWatcom 2.0
        uses: open-watcom/setup-watcom@v0
        with:
          version: "2.0"

      - name: Build pgusinit
        working-directory: ${{github.workspace}}/pgusinit
        run: |
          make -f Makefile-cross INCLUDE="$WATCOM"/h
          cp pgusinit.exe $OUTPUT_DIR

      # will generate pgusinit.zip as downloadable artifact with pgusinit.exe
      - name: Upload pgusinit
        uses: actions/upload-artifact@v3
        with:
          name: pgusinit
          path: ${{env.OUTPUT_DIR}}
